{"ast":null,"code":"import _defineProperty from \"/home/mat/Projects/react-apps/reacte-commerce/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDoc, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSucces, signInFailure, signUpSucces, signOutSucces, signOutFailure, signUpFailure } from './user.actions';\nimport { all, call } from 'redux-saga/effects';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDoc, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSucces(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {\n    put(signInFailure(err));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmailAndPassword({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {\n    put(signInFailure(err));\n  }\n}\nexport function* onEmailAndPasswordSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmailAndPassword);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (err) {\n    put(signInFailure(err));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSucces());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user;\n\n    yield put(signUpSucces(user, displayName));\n  } catch (err) {\n    yield put(signUpFailure(err));\n  }\n}\nexport function* signUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* singUpSucces() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCES, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailAndPasswordSignInStart), call(onCheckUserSession), call(onSignOutStart), call(signUpStart)]);\n}","map":{"version":3,"sources":["/home/mat/Projects/react-apps/reacte-commerce/src/redux/user/user.sagas.js"],"names":["takeLatest","put","UserActionTypes","googleProvider","auth","createUserProfileDoc","getCurrentUser","signInSucces","signInFailure","signUpSucces","signOutSucces","signOutFailure","signUpFailure","all","call","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","user","err","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmailAndPassword","payload","email","password","onEmailAndPasswordSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","signUp","displayName","createUserWithEmailAndPassword","signUpStart","SIGN_UP_START","signInAfterSignUp","singUpSucces","SIGN_OUT_SUCCES","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDoc, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSucces, signInFailure, signUpSucces, signOutSucces, signOutFailure, signUpFailure } from './user.actions';\nimport { all, call } from 'redux-saga/effects';\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try {\n        const userRef = yield call(\n            createUserProfileDoc,\n            userAuth,\n            additionalData\n        );\n        const userSnapshot = yield userRef.get();\n        yield put(signInSucces({ id: userSnapshot.id, ...userSnapshot.data() }));\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithGoogle() {\n\n    try {\n\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n\n    } catch (err) {\n        put(signInFailure(err))\n    }\n\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* signInWithEmailAndPassword({ payload: { email, password } }) {\n\n    try {\n\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n\n    } catch (err) {\n        put(signInFailure(err))\n    }\n}\n\nexport function* onEmailAndPasswordSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmailAndPassword)\n}\n\nexport function* isUserAuthenticated() {\n    try {\n\n        const userAuth = yield getCurrentUser();\n\n        if (!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n\n\n    } catch (err) {\n        put(signInFailure(err))\n    }\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* signOut() {\n    try {\n        yield auth.signOut();\n        yield put(signOutSucces());\n    } catch (error) {\n        yield put(signOutFailure(error));\n    }\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* signUp({ payload: { email, password, displayName } }) {\n    try {\n        const { user } = yield auth.createUserWithEmailAndPassword(\n            email,\n            password\n        );\n\n        yield put(signUpSucces(user, displayName))\n\n    }\n    catch (err) {\n        yield put(signUpFailure(err))\n    }\n\n}\n\nexport function* signUpStart() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n    yield getSnapshotFromUserAuth(user, additionalData)\n}\n\nexport function* singUpSucces() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_SUCCES, signInAfterSignUp)\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailAndPasswordSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart),\n        call(signUpStart)\n    ])\n}"]},"metadata":{},"sourceType":"module"}